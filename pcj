#include <iostream>
#include <fstream>

int Num_Mat, Reg_X, Reg_Y,Tot_X,Tot_Y;
double *Reg_Dist_X, *Reg_Dist_Y;
int *Reg_Divs_X, *Reg_Divs_Y,**MAPPING;
double **Sig_t,**Sig_a,**Sig_ii,**Sig_ij,**NuSig_f;
int B_C[4];
double eps_k, eps_phi;


using namespace std;

void Read_Input()
{
    int i,j,k1,k2;
    ifstream fin;

    char charr[256];

    fin.open("input.txt");

    fin.getline(charr,256);
         cout << charr << endl;

    fin >> Num_Mat;
         cout<< Num_Mat << endl;

     fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    fin >> Reg_X>> Reg_Y;
         cout<< Reg_X << ' ' << Reg_Y<< endl;


    Reg_Dist_X=new double[Reg_X];
    Reg_Dist_Y=new double[Reg_Y];

     fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    for(i=0;i<Reg_X;i++)
        fin >> Reg_Dist_X[i];
    for(i=0;i<Reg_X;i++)
        cout << Reg_Dist_X[i]<<' ';
        cout <<' '<<endl;

     fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    for(i=0;i<Reg_Y;i++)
        fin >> Reg_Dist_Y[i];

    for(i=0;i<Reg_Y;i++)
        cout << Reg_Dist_Y[i]<<' ';
        cout <<' '<<endl;


    Reg_Divs_X=new int[Reg_X];
    Reg_Divs_Y=new int[Reg_Y];

   fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    for(i=0;i<Reg_X;i++)
        fin >> Reg_Divs_X[i];
    for(i=0;i<Reg_X;i++)
        cout << Reg_Divs_X[i]<<' ';
        cout <<' '<<endl;

     fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    for(i=0;i<Reg_Y;i++)
        fin >> Reg_Divs_Y[i];

    for(i=0;i<Reg_Y;i++)
        cout << Reg_Divs_Y[i]<<' ';
        cout <<' '<<endl;


    Tot_X=0;
    for(i=0;i<Reg_X;i++)
        Tot_X += Reg_Divs_X[i];

    Tot_Y=0;
    for(i=0;i<Reg_Y;i++)
        Tot_Y += Reg_Divs_Y[i];

         cout <<"TotX="<< Tot_X << "TotY="<< Tot_Y<< endl;

    MAPPING = new int*[Tot_X];
    for(i=0;i<Tot_X;i++)
            MAPPING[i]= new int[Tot_Y];


   fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    for(i=0;i<Tot_X;i++)
    for(j=0;j<Tot_Y;j++)
     fin >> MAPPING[i][j];

    for(i=0;i<Tot_X;i++){
    for(j=0;j<Tot_Y;j++)
     cout<< MAPPING[i][j] <<' ';
     cout<<' '<< endl;
    }

   fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

  Sig_t = new double*[2];
  Sig_a = new double*[2];
  Sig_ii= new double*[2];
  Sig_ij= new double*[2];
  NuSig_f= new double*[2];

  for(i=0;i<2;i++){
  Sig_t[i] = new double[Num_Mat];
  Sig_a[i] = new double[Num_Mat];
  Sig_ii[i]= new double[Num_Mat];
  Sig_ij[i]= new double[Num_Mat];
  NuSig_f[i]= new double[Num_Mat];
  }

 for(i=0;i<Num_Mat;i++)
    for(j=0;j<2;j++)
    fin >>k1>>k2>>Sig_t[i][j]>>Sig_a[i][j]>>Sig_ii[i][j]>>Sig_ij[i][j]>>NuSig_f[i][j];

 for(i=0;i<Num_Mat;i++) {
    for(j=0;j<2;j++)
      cout << i+1 << ' ' <<j+1 << ' ' << Sig_t[i][j]<<' ' << Sig_a[i][j]
           << ' ' << Sig_ii[i][j]  << ' ' << Sig_ij[i][j] << ' ' << NuSig_f[i][j] << endl;
      cout <<endl;
 }

    fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;

    fin >>B_C[0]>>B_C[1]>>B_C[2]>>B_C[3];

    cout << B_C[0] << ' ' << B_C[1] << ' ' << B_C[2] << ' ' << B_C[3] << endl;

     fin.getline(charr,256);
    fin.getline(charr,256);
         cout << charr << endl;
     fin >> eps_k >>eps_phi;

     cout << eps_k << ' ' <<eps_phi << endl;


    fin.close();


}

void Make_Matrix()
{

    }

void Update_Thermal_Flux()
{

}

void Update_Fast_Flux()
{

}

void Update_keff()
{

}

void Print_out()
{

}


int main(){

double kerr,ferr;


Read_Input();

Make_Matrix();

kerr=0.;
ferr=0.;

do{
Update_Thermal_Flux();

Update_Fast_Flux();

Update_keff();
}while( (kerr>eps_k) || (ferr >eps_phi) );

Print_out();


return 0;
}


